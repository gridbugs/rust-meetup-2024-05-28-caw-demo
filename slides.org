#+title: CAW: A Modular Synthesizer Library for Rust
#+author: Stephen Sherratt
#+email: stephen@sherra.tt

* CAW: A Modular Synthesizer Library for Rust

[[file:./logo.png]]
# (image credit: my sister!)

* Analog Modular Synthesizers

[[file:./moog.jpg]]
# (image credit: thesilo.ca)

- sound is produced by /modules/
- produce a sound by /patching/ modules together
- audio and control signals are just voltages

* A /Software-Defined/ Modular Synthesizer

Replace modules and wires with code!

#+begin_src rust

// A 200Hz saw-tooth wave
let osc = oscillator_hz(Waveform::Saw, 200.0).build();

// Run the wave through a low pass filter with a 4kHz cutoff
osc.filter(low_pass_moog_ladder(4000.0).build())

#+end_src

* The `Signal<T>` type

** A value that changes at the audio sample rate

#+begin_src rust

/// Create an oscillator with a given frequency
fn oscillator_hz(
    waveform: Waveform, // Sine, Saw, Pulse, etc
    freq_hz: f64,
) -> Signal<f64>;

let c4_major_chord: Signal<f64> =
    [note::C4, note::E4, note::G4]
	.into_iter()
	.map(|note| {
             oscillator_hz(Waveform::Saw, note.freq_hz()).build()
        })
	.sum(); // <-- signals can be added!
#+end_src

** `Signal<f64>` is analagous to the voltage in a cable

#+begin_src rust

// I lied before!
fn oscillator_hz(
    waveform: impl Into<Signal<Waveform>>,
    freq_hz: impl Into<Signal<f64>>,
) -> Signal<f64>;

let vibrato: Signal<f64> =
    oscillator_hz(Waveform::Sine, 4.0).build() * 20.0;

let c4_major_chord: Signal<f64> =
    [note::C4, note::E4, note::G4]
        .into_iter()
        .map(|note| {
            oscillator_hz(
                Waveform::Saw,
                note.freq_hz() + &vibrato, // <-- coersion, composition
            ).build()
        })
        .sum();
#+end_src

** Filters can be composed with `.filter(...)`

(also supports combinators such as `map` and `both`)

#+begin_src rust

let vibrato: Signal<f64> =
    oscillator_hz(Waveform::Sine, 4.0).build();

let signal: Signal<f64> =
    oscillator_hz(Waveform::Saw, note::C3.freq_hz())
        .build()
        .filter(
            low_pass_chebyshev(1000.0 + vibrato.signed_to_01() * 4000)
                .resonance(10.0)
                .build(),
        )
        .filter(compress().build());

#+end_src

* The rest of this talk is a demo!

** Make the THX sound
























#+begin_src rust

fn interp_rand<R: Rng>(
    rng: &mut R,
    freq_hz: f64,
    interp: Sf64,
) -> Sf64 {
    let base_freq_hz = (freq_hz / 2.0)
        + (rng.gen::<f64>() * freq_hz);
    oscillator_hz(
        Waveform::Saw,
        (freq_hz * &interp)
            + (base_freq_hz
                * (1.0 - interp)),
    )
    .build()
}

fn voice(input: Input) -> Sf64 {
    let mut rng =
        StdRng::from_entropy();
    [50, 100, 200, 400]
        .into_iter()
        .map(|freq_hz| {
            (0..10)
                .into_iter()
                .map(|_| {
                    interp_rand(
                        &mut rng,
                        freq_hz as f64,
                        input
                            .mouse
                            .x_01(),
                    )
                })
                .sum()
        })
        .sum()
}

#+end_src

** Play with gates, filter, reverb
























#+begin_src rust
fn voice_single(
    input: Input,
    key: Key,
    freq_hz: f64,
) -> Sf64 {
    let env = adsr_linear_01(input.keyboard.get(key))
        .release_s(0.1)
        .build();
    let osc =
        |freq| oscillator_hz(Waveform::Saw, freq).build();
    let osc = osc(freq_hz) + osc(freq_hz * 2.0);
    osc.filter(
        low_pass_moog_ladder(
            20000.0 * env * input.mouse.x_01(),
        )
        .resonance(input.mouse.y_01() * 2.0)
        .build(),
    )
    .filter(reverb().room_size(0.9).build())
}

fn voice(input: Input) -> Sf64 {
    sum([
        voice_single(
            input.clone(),
            Key::A,
            note::C3.freq_hz(),
        ),
        voice_single(
            input.clone(),
            Key::S,
            note::D3.freq_hz(),
        ),
        voice_single(
            input.clone(),
            Key::D,
            note::E3.freq_hz(),
        ),
    ])
}
#+end_src

** Show off some example programs

*** midi_file

- Play ~/Downloads/Ludwig\ Van\ Beethoven\ -\ Moonlight\ Sonata\ 3rd\ Movement.mid.mid

*** keyboard_and_mouse_arp

- Take the notes of all the keys currently pressed, plus an octave above, and arp between each note in an increasing pattern

*** keyboard_and_mouse_arp_index_loops

- Demonstrates synthesizing drum sounds.
- Arpegiates between whatever keys are held down, gradually changing pattern.

*** vocoder

- Don't forget to add a delay to avoid feedback!
- Can't run it from emacs as emacs doesn't have mic permission.

* Questions

(btw "CAW" stands for "Combinatorial Audio Workstation")
